@using System.Security.Claims
@using LearningWordsOnline.ViewModels;
@model IEnumerable<LearningWordsOnline.ViewModels.NotificationItemViewModel>

@{
    var aspNetUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

<ul class="notification-list">
    <li class="notification-item">
        <a href="#" class="sender-link">
            <div class="sender-icon">
                <img src="/images/icons/gear.png"
                height="32" width="32" class="rounded-circle" alt="SenderIcon" style="object-fit: contain;">
            </div>
        </a>
        <div class="">
            <div class="notification-content">【メンテナンスの告知】<br /> 2025/04/01 午前1時00分～午前3時00分</div>
            <span class="createdAt">2025/03/05 09:00</span>
        </div>
        <a aria-label="詳細を見る" href="" class="notification-link"></a>
    </li>
    @foreach(var item in Model)
    {
        var backgroundClass = item.IsReferenced ? "bg-read" : "bg-unread";
        <li class="notification-item @backgroundClass">
            <a asp-action="@item.Sender.Id" asp-controller="Profile" class="sender-link">
                <div class="sender-icon">
                    <img src="@Url.Content(item.Sender.Profile.Icon?.Url ?? "/images/icons/gear.png")"
                    height="32" width="32" class="rounded-circle" alt="SenderIcon" style="object-fit: contain;">
                </div>
            </a>
            <div class="">
                <div class="notification-content @GetNotificationTypeClass(item.NotificationType) @GetIsDoneClass(item.IsDone)">
                    @if (item.NotificationType is NotificationType.Announce)
                    {
                        @item.Text
                    }
                    else if (item.NotificationType is NotificationType.FriendRequest)
                    {
                        @* <div id="friend-request-id" data-friend-request-id="@item.Text"></div> *@
                        <div>
                            <span>@item.Sender.Profile.DisplayName</span>@("からフレンド申請がきています！")
                        </div>
                        @if(!item.IsDone)
                        {
                            <div class="mt-2 response-btns">
                                <button class="btn btn-sm btn-danger me-2 btn-notification-friend-request btn-notification-friend-request-reject" value="@item.Text">Reject</button>
                                <button class="btn btn-sm btn-success btn-notification-friend-request btn-notification-friend-request-accept" value="@item.Text">Accept</button>
                            </div>
                        }
                        else
                        {
                            <span class="text-muted ms-2" style="font-size: 0.9rem;">→ 既に返答済みです</span>
                        }
                    }
                    else if (item.NotificationType is NotificationType.RoomInvitation)
                    {
                        @* <div id="room-invitation-id" data-room-invitation-id="@item.Text"></div> *@
                        <div>
                            <span>@item.Sender.Profile.DisplayName</span>@("からゲームに誘われています！")
                        </div>
                        @if (!item.IsDone)
                        {
                            <div class="mt-2">
                                <a class="btn btn-brand btn-sm px-4 ms-1" asp-route-roomId="@item.Text" asp-action="Join" asp-controller="Rooms">Join</a>
                            </div>
                        }
                        else
                        {
                            <span class="text-muted ms-2" style="font-size: 0.9rem;">→ 既に解散しています</span>
                        }
                    }
                </div>
                <span class="createdAt">
                    @item.CreatedAt.ToString("yyyy/MM/dd HH:mm")
                </span>
            </div>
            @if (item.NotificationType is NotificationType.Announce)
            {
                <a aria-label="detailed" href="@item.Url" class="notification-link"></a>
            }
            else if (item.NotificationType is NotificationType.FriendRequest)
            {
                @* <a aria-label="detailed" asp-action="Index" asp-controller="FriendRequests" class="notification-link"></a> *@
            }
            else if (item.NotificationType is NotificationType.RoomInvitation)
            {
                @* <a aria-label="detailed" asp-route-roomId="@item.Text" asp-action="Join" asp-controller="Rooms" class="notification-link"></a> *@
            }
        </li>
    }
</ul>
@functions {
    public string GetNotificationTypeClass(NotificationType type)
    {
        return type switch
        {
            NotificationType.Announce => "notification-announce",
            NotificationType.FriendRequest => "notification-friend-request",
            NotificationType.RoomInvitation => "notification-room-invitation",
            _ => ""
        };
    }

    public string GetIsDoneClass(bool isDone)
        => isDone ? "notification-done" : "notification-yet";
}

<script>
    document.querySelectorAll(".btn-notification-friend-request").forEach(button => {
        button.addEventListener("click", async () => {
        const responseBtnsDiv = button.parentElement;
        responseBtnsDiv.querySelectorAll('.btn-notification-friend-request').forEach(btn => btn.disabled = true );
        responseBtnsDiv.style.display='none';
        const message = document.createElement("span");
            message.style='font-size: 0.9rem;';
        let action;
        if (button.classList.contains('btn-notification-friend-request-reject'))
            action = 'Reject';
        else if (button.classList.contains('btn-notification-friend-request-accept'))
            action = 'Accept'
        if (await handleNotificationRequest(button.value, action) === true) {
            message.className = "text-muted ms-2";
            message.textContent = "→ 既に返答済みです";
        }
        else{
            message.className = "text-danger ms-2";
            message.textContent = "エラーが発生しました。";
        }
        responseBtnsDiv.parentElement.appendChild(message); // 親要素に追加
        });
    });

    // フレンド申請処理の共通関数
    async function handleNotificationRequest(friendRequestId, action) {
        const options = {
            method: "POST",
            url: `/FriendRequests/${action}`,
            headers: { "Content-Type": "application/json" },
            data: friendRequestId
        };

        try {
            const response = await axios(options);
            if (response.status === 200) {
                // console.log('フレンド申請が成功しました');
                return true;
            } else {
                // console.log('フレンド申請が失敗しました');
                return false;
            }
        } catch (error) {
            console.error('エラーが発生しました', error);
            return false;
        }
    }
</script>

<style>
    .notification-list {
        max-height: 250px; /* 一度に表示する高さ（調整可能） */
        overflow-y: auto; /* 縦スクロールを有効化 */
        padding: 0;
        margin: 0;
        list-style: none;
    }

    /* 通知リストアイテム */
    .notification-item {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        border-bottom: 1px solid #f0f0f0;
        transition: background-color 0.1s ease;
        position: relative;
    }

        .notification-item:hover {
            background-color: #f4f4f4;
        }

            .notification-item.bg-read:hover {
            background-color: #f4f4f4; /* 既読のHover用の背景色 */
            border-radius: 8px; /* Hover時に角を丸く */
        }

        .notification-item.bg-unread {
            background-color: #FFFBDA; /* 未読の明るい背景色 */
        }

        .notification-item.bg-unread:hover {
            background-color: #F2ECB6; /* 未読のHover用の背景色 */
            border-radius: 8px; /* Hover時に角を丸く */
        }

    /* アイコン部分 */
    .sender-link {
        flex-shrink: 0;
        margin-right: 12px;
        text-decoration: none;
        z-index: 2;
    }

    .sender-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #e8e8e8;
        border-radius: 50%;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .sender-icon img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    /* 通知内容 */
    .notification-content {
        font-size: 14px;
        color: #333;
        line-height: 1.4;
        word-break: break-word;
    }

    /* 日付部分 */
    .createdAt {
        font-size: 12px;
        color: #999;
    }

    /* 詳細リンク */
    .notification-link {
        position: absolute;
        /* top: 50%; */
        inset: 0; /* 全体をカバー */
        z-index: 1; /* アイコンより低い */
        /* right: 16px; */
        /* font-size: 14px; */
        color: inherit;
        text-decoration: none;
    }
</style>