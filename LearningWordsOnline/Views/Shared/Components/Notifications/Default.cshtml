@using LearningWordsOnline.ViewModels;
@model IEnumerable<LearningWordsOnline.ViewModels.NotificationItemViewModel>

@* <div id="notification-menu" class="action-item notification-menu"> *@
    <ul class="notification-list">
        <li class="notification-item">
            <a href="#" class="sender-link">
                <div class="sender-icon">
                    <img src="/images/icons/gear.png"
                         height="32" width="32" class="rounded-circle" alt="SenderIcon" style="object-fit: contain;">
                </div>
            </a>
            <div class="">
                <p class="notification-content">【メンテナンスの告知】<br /> 2025/04/01 午前1時00分～午前3時00分</p>
                <span class="createdAt">2025/03/05 09:00</span>
            </div>
            <a aria-label="詳細を見る" href="" class="notification-link"></a>
        </li>
        @foreach(var item in Model)
        {
            <li class="notification-item">
                <a asp-action="@item.Sender.Id" asp-controller="Profile" class="sender-link">
                    <div class="sender-icon">
                        <img src="@Url.Content(item.Sender.Profile.Icon?.Url ?? "/images/icons/gear.png")"
                        height="32" width="32" class="rounded-circle" alt="SenderIcon" style="object-fit: contain;">
                    </div>
                </a>
                <div class="">
                    <p class="notification-content">
                        @if (item.NotificationType is NotificationType.Announce)
                        {
                            @item.Text
                        }
                        else if (item.NotificationType is NotificationType.FriendRequest)
                        {
                            <span>@item.Sender.Profile.DisplayName</span>@("からフレンド申請がきています！")
                        }
                        else if (item.NotificationType is NotificationType.RoomInvitation)
                        {
                            <span>@item.Sender.Profile.DisplayName</span>@("からゲームに誘われています！")
                        }
                    </p>
                    <span class="createdAt">
                        <script>
                            // 受け取った日時をUTCとして処理→UTCの値をローカルタイムに変換して表示
                            document.currentScript.parentElement.innerText = 
                                new Date("@item.CreatedAt.ToString("yyyy-MM-ddTHH:mmZ")" )
                                    .toLocaleString(undefined, {
                                        year: 'numeric', month: '2-digit', day: '2-digit', 
                                        hour: '2-digit', minute: '2-digit',hour12: false });
                        </script>
                    </span>
                </div>
                @if (item.NotificationType is NotificationType.Announce)
                {
                    <a aria-label="detailed" href="@item.Url" class="notification-link"></a>
                }
                else if (item.NotificationType is NotificationType.FriendRequest)
                {
                    <a aria-label="detailed" asp-action="Index" asp-controller="FriendRequests" class="notification-link"></a>
                }
                else if (item.NotificationType is NotificationType.RoomInvitation)
                {
                    <a aria-label="detailed" asp-route-roomId="@item.Text" asp-action="Join" asp-controller="Rooms" class="notification-link"></a>
                }
            </li>
        }
    </ul>
@* </div> *@


<script>

</script>

<style>


    .notification-list {
        max-height: 250px; /* 一度に表示する高さ（調整可能） */
        overflow-y: auto; /* 縦スクロールを有効化 */
        padding: 0;
        margin: 0;
        list-style: none;
    }


    /* 通知リストアイテム */
    .notification-item {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        border-bottom: 1px solid #f0f0f0;
        transition: background-color 0.1s ease;
        position: relative;
    }

        .notification-item:hover {
            background-color: #f4f4f4;
            border-radius: 8px;
        }

    /* アイコン部分 */
    .sender-link {
        flex-shrink: 0;
        margin-right: 12px;
        text-decoration: none;
        z-index: 2;
    }

    .sender-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #e8e8e8;
        border-radius: 50%;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .sender-icon img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    /* 通知内容 */
    .notification-content {
        font-size: 14px;
        margin: 0 0 4px;
        color: #333;
        line-height: 1.4;
        word-break: break-word;
    }

    /* 日付部分 */
    .createdAt {
        font-size: 12px;
        color: #999;
    }

    /* 詳細リンク */
    .notification-link {
        position: absolute;
        /* top: 50%; */
        inset: 0; /* 全体をカバー */
        z-index: 1; /* アイコンより低い */
        /* right: 16px; */
        /* font-size: 14px; */
        color: inherit;
        text-decoration: none;
    }
</style>